{
  "id": "TestcafeBuilderOptions",
  "title": "TestCafe builder",
  "description": "TestCafe builder options",
  "type": "object",
  "definitions": {
    "clientScriptPath": {
      "type": "object",
      "description": "specify the JavaScript file path to inject the content of this file into the tested pages",
      "required": ["path"],
      "allOf": [
        {
          "not": {
            "required": ["module"]
          }
        },
        {
          "not": {
            "required": ["content"]
          }
        }
      ],
      "properties": {
        "path": {
          "type": "string",
          "description": "the path to the JavaScript file whose content should be injected"
        }
      },
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "specify a page URL to add scripts to a page"
            }
          },
          "required": ["page"],
          "not": {
            "required": ["pageRegex"]
          }
        },
        {
          "type": "object",
          "properties": {
            "pageRegex": {
              "type": "string",
              "description": "specify a regular expression to add scripts to pages whose URLs match this expression"
            }
          },
          "required": ["pageRegex"],
          "not": {
            "required": ["page"]
          }
        },
        {
          "type": "object",
          "allOf": [
            {
              "not": {
                "required": ["page"]
              }
            },
            {
              "not": {
                "required": ["pageRegex"]
              }
            }
          ]
        }
      ]
    },
    "clientScriptModule": {
      "type": "object",
      "description": "specify the Node.js module's name to inject its content into the tested pages",
      "required": ["module"],
      "allOf": [
        {
          "not": {
            "required": ["path"]
          }
        },
        {
          "not": {
            "required": ["content"]
          }
        }
      ],
      "properties": {
        "module": {
          "type": "string",
          "description": "the module name"
        }
      },
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "specify a page URL to add scripts to a page"
            }
          },
          "required": ["page"],
          "not": {
            "required": ["pageRegex"]
          }
        },
        {
          "type": "object",
          "properties": {
            "pageRegex": {
              "type": "string",
              "description": "specify a regular expression to add scripts to pages whose URLs match this expression"
            }
          },
          "required": ["pageRegex"],
          "not": {
            "required": ["page"]
          }
        },
        {
          "type": "object",
          "allOf": [
            {
              "not": {
                "required": ["page"]
              }
            },
            {
              "not": {
                "required": ["pageRegex"]
              }
            }
          ]
        }
      ]
    },
    "clientScriptContent": {
      "type": "object",
      "description": "you can pass an object with the content property to provide the injected script as a string",
      "required": ["content"],
      "allOf": [
        {
          "not": {
            "required": ["path"]
          }
        },
        {
          "not": {
            "required": ["module"]
          }
        }
      ],
      "properties": {
        "content": {
          "type": "string",
          "description": "JavaScript that should be injected"
        }
      },
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "page": {
              "type": "string",
              "description": "specify a page URL to add scripts to a page"
            }
          },
          "required": ["page"],
          "not": {
            "required": ["pageRegex"]
          }
        },
        {
          "type": "object",
          "properties": {
            "pageRegex": {
              "type": "string",
              "description": "specify a regular expression to add scripts to pages whose URLs match this expression"
            }
          },
          "required": ["pageRegex"],
          "not": {
            "required": ["page"]
          }
        },
        {
          "type": "object",
          "allOf": [
            {
              "not": {
                "required": ["page"]
              }
            },
            {
              "not": {
                "required": ["pageRegex"]
              }
            }
          ]
        }
      ]
    },
    "reporter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "specifies the reporter name"
        },
        "output": {
          "type": "string",
          "description": "specifies the path to the file"
        }
      },
      "required": ["name"],
      "additionalProperties": false
    }
  },
  "properties": {
    "appCommand": {
      "type": "string",
      "description": "[TestCafe] Executes the specified shell command before tests are started. Use the appCommand property to launch the application you need to test. This application is automatically terminated after testing is finished."
    },
    "appInitDelay": {
      "type": "number",
      "description": "[TestCafe] Specifies the time (in milliseconds) allowed for an application launched with the appCommand option to initialize. TestCafe waits for the specified time before it starts the tests.",
      "default": 1000
    },
    "assertionTimeout": {
      "type": "number",
      "description": "[TestCafe] Specifies the time (in milliseconds) TestCafe attempts to successfully execute an assertion if a selector property or a client function was passed as an actual value",
      "default": 3000
    },
    "clientScripts": {
      "description": "[TestCafe] Injects scripts into pages visited during the tests. Use this property to introduce client-side mock functions or helper scripts",
      "oneOf": [
        {
          "type": "string",
          "description": "Script to inject into the tested pages"
        },
        {
          "type": "object",
          "oneOf": [
            { "$ref": "#/definitions/clientScriptPath" },
            { "$ref": "#/definitions/clientScriptModule" },
            { "$ref": "#/definitions/clientScriptContent" }
          ]
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "description": "Script to inject into the tested pages"
              },
              {
                "type": "object",
                "oneOf": [
                  { "$ref": "#/definitions/clientScriptPath" },
                  { "$ref": "#/definitions/clientScriptModule" }
                ]
              }
            ]
          }
        }
      ]
    },
    "color": {
      "type": "boolean",
      "description": "[TestCafe] Enables colors in the command line"
    },
    "concurrency": {
      "type": "number",
      "description": "[TestCafe] Specifies the number of browser instances that should run tests concurrently",
      "default": 1
    },
    "debugMode": {
      "type": "boolean",
      "description": "[TestCafe] Runs tests in the debugging mode"
    },
    "debugOnFail": {
      "type": "boolean",
      "description": "[TestCafe] Specifies whether to automatically enter the debug mode when a test fails. If this option is enabled, TestCafe pauses the test when it fails. This allows you to view the tested page and determine the cause of the fail. When you are done, click the Finish button in the footer to end test execution."
    },
    "developmentMode": {
      "type": "boolean",
      "description": "[TestCafe] Enables mechanisms to log and diagnose errors. You should enable this option if you plan to contact TestCafe Support to report an issue."
    },
    "devServerTarget": {
      "type": "string",
      "description": "[Angular] Dev server target to run tests against."
    },
    "disablePageCaching": {
      "type": "boolean",
      "description": "[TestCafe] Prevents the browser from caching page content. When navigation to a cached page occurs in role code, local and session storage content is not preserved. Set disablePageCaching to true to retain the storage items after navigation."
    },
    "disableScreenshots": {
      "type": "boolean",
      "description": "[TestCafe] Prevents TestCafe from taking screenshots. When this property is specified, screenshots are not taken when a test fails or a screenshot action is executed."
    },
    "disableTestSyntaxValidation": {
      "type": "boolean",
      "description": "[TestCafe] disables checks for 'test' and 'fixture' directives to run dynamically loaded tests"
    },
    "filter": {
      "type": "object",
      "description": "Allows you to specify which tests or fixtures to run. Use the following properties individually or in combination.",
      "properties": {
        "fixture": {
          "type": "string",
          "description": "[TestCafe] Runs a fixture with the specified name."
        },
        "fixtureGrep": {
          "type": "string",
          "description": "[TestCafe] Runs tests whose names match the specified grep pattern."
        },
        "fixtureMeta": {
          "type": "object",
          "description": "[TestCafe] Runs tests whose fixture's metadata matches the specified key-value pair.",
          "additionalProperties": true
        },
        "test": {
          "type": "string",
          "description": "[TestCafe] Runs a test with the specified name."
        },
        "testGrep": {
          "type": "string",
          "description": "[TestCafe] Runs tests whose names match the specified grep pattern."
        },
        "testMeta": {
          "type": "object",
          "description": "[TestCafe] Runs tests whose metadata matches the specified key-value pair.",
          "additionalProperties": true
        }
      }
    },
    "host": {
      "type": "string",
      "description": "[TestCafe] Specifies your computer's hostname. It is used when you run tests in remote browsers. (only if devServerTarget is not set), default = localhost. If the hostname is not specified, TestCafe uses the operating system's hostname or the current machine's network IP address.",
      "default": "localhost"
    },
    "live": {
      "type": "boolean",
      "description": "Live mode ensures TestCafe and the browsers remain active while you work on tests. You can see test results instantly because the tests are restarted when you make changes.",
      "default": false
    },
    "noColor": {
      "type": "boolean",
      "description": "[TestCafe] Disables colors in the command line."
    },
    "pageLoadTimeout": {
      "type": "number",
      "description": "[TestCafe] Specifies the time (in milliseconds) passed after the DOMContentLoaded event, within which TestCafe waits for the window.load event to fire. After the timeout passes or the window.load event is raised (whichever happens first), TestCafe starts the test."
    },
    "port1": {
      "type": "number",
      "description": "[TestCafe] Specifies custom port1 numbers TestCafe uses to perform testing. TestCafe automatically selects ports if ports are not specified."
    },
    "port2": {
      "type": "number",
      "description": "[TestCafe] Specifies custom port2 numbers TestCafe uses to perform testing. TestCafe automatically selects ports if ports are not specified."
    },
    "proxy": {
      "type": "string",
      "description": "[TestCafe] Specifies the proxy server used in your local network to access the Internet."
    },
    "proxyBypass": {
      "description": "[TestCafe] Requires that TestCafe bypasses the proxy server to access the specified resources.",
      "oneOf": [
        {
          "type": "string",
          "description": "Requires that TestCafe bypasses the proxy server to access the specified resources."
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Requires that TestCafe bypasses the proxy server to access the specified resources."
          }
        }
      ]
    },
    "qrCode": {
      "type": "boolean",
      "description": "[TestCafe] If you launch TestCafe from the console, this option outputs a QR-code that represents URLs used to connect the remote browsers."
    },
    "quarantineMode": {
      "type": "boolean",
      "description": "[TestCafe] Enables the quarantine mode for tests that fail."
    },
    "reporters": {
      "description": "[TestCafe] specify the reporters and optionally files where reports are saved",
      "oneOf": [
        {
          "type": "string"
        },
        { "$ref": "#/definitions/reporter" },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reporter"
          }
        }
      ],
      "default": ["spec"]
    },
    "screenshots": {
      "type": "object",
      "description": "[TestCafe] Screenshots options",
      "properties": {
        "path": {
          "type": "string",
          "description": "Specifies the base directory where screenshots are saved."
        },
        "takeOnFails": {
          "type": "boolean",
          "description": "Specifies that a screenshot should be taken whenever a test fails."
        },
        "pathPattern": {
          "type": "string",
          "description": "Specifies a custom pattern to compose screenshot files' relative path and name. ${DATE}_${TIME}/test-${TEST_INDEX}/${USERAGENT}/${FILE_INDEX}.png"
        },
        "fullPage": {
          "type": "boolean",
          "description": "Specifies that the full page should be captured, including content that is not visible due to overflow."
        }
      }
    },
    "selectorTimeout": {
      "type": "number",
      "description": "[TestCafe] Specifies the time (in milliseconds) within which selectors attempt to obtain a node to be returned.",
      "default": 10000
    },
    "skipJsErrors": {
      "type": "boolean",
      "description": "[TestCafe] Ignores JavaScript errors on a webpage. When a JavaScript error occurs on a tested web page, TestCafe stops test execution and posts an error message and a stack trace to a report. To ignore JavaScript errors, set the skipJsErrors property to true."
    },
    "skipUncaughtErrors": {
      "type": "boolean",
      "description": "[TestCafe] Ignores uncaught errors and unhandled promise rejections in test code. When an uncaught error or unhandled promise rejection occurs on the server during test execution, TestCafe stops the test and posts an error message to a report. To ignore these errors, use the skipUncaughtErrors property."
    },
    "speed": {
      "type": "number",
      "description": "[TestCafe] Specifies the test execution speed. Tests are run at the maximum speed by default. You can use this option to slow the test down. Provide a number between 1 (the fastest) and 0.01 (the slowest)."
    },
    "src": {
      "description": "[TestCafe] Specifies files or directories from which to run tests. You can use glob patterns to specify a set of files.",
      "oneOf": [
        {
          "type": "string",
          "description": "path of the test file"
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "description": "path of the test file"
          }
        }
      ],
      "default": [["e2e/**/*.steps.ts", "e2e/**/*.feature"]]
    },
    "ssl": {
      "type": "object",
      "description": "[TestCafe] Provides options that allow you to establish an HTTPS connection between the client browser and the TestCafe server.",
      "properties": {
        "pfx": {
          "type": "string",
          "description": "PFX or PKCS12 encoded private key and certificate chain"
        },
        "enableTrace": {
          "type": "boolean",
          "description": "When enabled, TLS packet trace information is written to `stderr`. This can be used to debug TLS connection problems. Default false"
        },
        "requestCert": {
          "type": "boolean",
          "description": "If true the server will request a certificate from clients that connect and attempt to verify that certificate. Defaults to false."
        },
        "rejectUnauthorized": {
          "type": "boolean",
          "description": "If true the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if requestCert is true. Default true."
        },
        "handshakeTimeout": {
          "type": "number",
          "description": "Abort the connection if the SSL/TLS handshake does not finish in the specified number of milliseconds. A 'tlsClientError' is emitted on the tls.Server object whenever a handshake times out. Default: 120000 (120 seconds)."
        },
        "sessionTimeout": {
          "type": "number",
          "description": "The number of seconds after which a TLS session created by the server will no longer be resumable. See Session Resumption for more information. Default: 300."
        },
        "ticketKeys": {
          "type": "string",
          "description": "48-bytes of cryptographically strong pseudo-random data"
        }
      }
    },
    "stopOnFirstFail": {
      "type": "boolean",
      "description": "[TestCafe] Stops a test run if any test fails."
    },
    "tags": {
      "description": "[TestCafe] Scenarios can be tagged using Gherkin's @-notation. The runner can then be configured to filter scenarios to be run based on these tags. The tags will be evaluated such that scenarios that have any of the including tags (begins with @) but none of the excluding tags (begins with ~@) will be run.",
      "oneOf": [
        {
          "type": "string",
          "description": "Tag"
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Tags"
          }
        }
      ]
    },
    "tsConfigPath": {
      "type": "string",
      "description": "[TestCafe] Enables TestCafe to use a custom TypeScript configuration file and specifies its location. You can specify an absolute or relative path. Relative paths are resolved against the current directory (the directory from which you run TestCafe)."
    },
    "video": {
      "type": "object",
      "description": "[TestCafe] Specifies configuration to record videos of test runs",
      "properties": {
        "videoPath": {
          "type": "string",
          "description": "the base directory where videos are saved"
        },
        "options": {
          "type": "object",
          "description": "specifies options that define how TestCafe records videos of test runs",
          "properties": {
            "failedOnly": {
              "type": "boolean",
              "description": "true to record only failed tests; false to record all tests; default false"
            },
            "singleFile": {
              "type": "boolean",
              "description": "true to save the entire recording as a single file; false to create a separate file for each test; default false"
            },
            "ffmpegPath": {
              "type": "string",
              "description": "the path to the FFmpeg codec executable. default autodetected"
            },
            "pathPattern": {
              "type": "string",
              "description": "a pattern that defines how TestCafe composes the relative path to a video file. Default is ${DATE}_${TIME}/${TEST_ID}/${RUN_ID}/${USERAGENT}/${FILE_INDEX}.mp4"
            }
          }
        },
        "encodingOptions": {
          "type": "object",
          "description": "specifies video encoding options"
        }
      }
    }
  },
  "oneOf": [
    {
      "type": "object",
      "properties": {
        "browsers": {
          "description": "browser alias or array of alliases to specify locally installed browsers",
          "oneOf": [
            {
              "type": "string",
              "description": "browser alias to specify locally installed browser"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "description": "browser aliases to specify locally installed browsers."
              }
            }
          ]
        }
      },
      "required": ["browsers"],
      "not": {
        "required": ["browser", "remoteBrowser"]
      }
    },
    {
      "type": "object",
      "properties": {
        "browser": {
          "type": "object",
          "description": "the path to the browser's executable (path) and command line parameters (cmd)",
          "properties": {
            "path": {
              "type": "string",
              "description": "path to the browser executable"
            },
            "cmd": {
              "type": "string",
              "description": "command line parameters"
            }
          },
          "required": ["path"]
        }
      },
      "required": ["browser"],
      "not": {
        "required": ["browsers", "remoteBrowser"]
      }
    },
    {
      "type": "object",
      "properties": {
        "remoteBrowser": {
          "type": "object",
          "description": "the path to the browser's executable (path) and command line parameters (cmd)",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL that should be visited from a remote browser in order to connect it to the TestCafe server"
            }
          },
          "required": ["url"]
        }
      },
      "required": ["remoteBrowser"],
      "not": {
        "required": ["browser", "browsers"]
      }
    },
    {
      "type": "object",
      "allOf": [
        {
          "not": {
            "required": ["browser"]
          }
        },
        {
          "not": {
            "required": ["browsers"]
          }
        },
        {
          "not": {
            "required": ["remoteBrowser"]
          }
        }
      ]
    }
  ],
  "required": ["src"]
}
